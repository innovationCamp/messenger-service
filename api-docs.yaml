openapi: 3.0.1
info:
  title: 회비관리 메신저 API
  description: SwaggerConfig로 생성한 문서입니다.
  version: "0.1"
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- JWT:
  - read
  - write
tags:
- name: ChannelContentController
  description: '@RequestAttribute User에서 현재 사용자 정보를 얻습니다.'
- name: MockController
  description: 테스트용 mock데이터 생성
- name: ChannelController
  description: '@RequestAttribute User에서 현재 사용자 정보를 얻습니다.'
paths:
  /api/user:
    get:
      tags:
      - user-controller
      operationId: getUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponseDto'
    put:
      tags:
      - user-controller
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponseDto'
    delete:
      tags:
      - user-controller
      operationId: deleteUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/channel/{channelId}:
    get:
      tags:
      - ChannelController
      summary: 사용자가 속한 채널 중 채널 id를 사용하여 단일 조회
      operationId: getChannel
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetChannelResponseDto'
    put:
      tags:
      - ChannelController
      summary: 채널 id를 사용하여 특정 채널 수정
      description: |-
        채널 관리자는 채널 이름과 채널 설명을 수정할 수 있습니다. 채널 비밀번호 수정 기능은 없습니다.

        updateChannel(@PathVariable Long, @RequestBody UpdateChannelRequestDto, @RequestAttribute User)
      operationId: updateChannel
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateChannelResponseDto'
    delete:
      tags:
      - ChannelController
      summary: 채널 id를 사용하여 특정 채널 삭제
      description: |-
        채널 관리자가 채널에 등록된 사용자들을 모두 추방하고 채널을 삭제합니다.

        deleteChannel(@PathVariable Long, @RequestAttribute User)
      operationId: deleteChannel
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/wallet/user:
    get:
      tags:
      - personal-wallet-controller
      operationId: getPersonalWallet
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonalWalletResponseDto'
    post:
      tags:
      - personal-wallet-controller
      operationId: createPersonalWallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalWalletCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonalWalletResponseDto'
    delete:
      tags:
      - personal-wallet-controller
      operationId: deletePersonalWallet
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/wallet/user/money:
    post:
      tags:
      - personal-wallet-controller
      summary: 개인통장에 입금하기
      description: Wallet 관련 테스트를 위해 원하는 금액만큼 입금 할 수 있게 구현했습니다.
      operationId: createMoney
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalWalletCreateMoneyDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonalWalletResponseDto'
  /api/wallet/transaction:
    post:
      tags:
      - wallet-controller
      operationId: createTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransactionResponseDto'
  /api/wallet/reservation:
    post:
      tags:
      - wallet-controller
      operationId: createReservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationResponseDto'
  /api/wallet/group:
    post:
      tags:
      - group-wallet-controller
      operationId: createGroupWallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupWalletCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupWalletResponseDto'
  /api/wallet/group/{groupWalletId}:
    get:
      tags:
      - group-wallet-controller
      operationId: getGroupWalletById
      parameters:
      - name: groupWalletId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupWalletResponseDto'
    post:
      tags:
      - group-wallet-controller
      operationId: participantGroupWalletById
      parameters:
      - name: groupWalletId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupWalletResponseDto'
    delete:
      tags:
      - group-wallet-controller
      operationId: deleteGroupWalletById
      parameters:
      - name: groupWalletId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/user/signup:
    post:
      tags:
      - user-controller
      operationId: signUpUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponseDto'
  /api/user/login:
    post:
      tags:
      - user-controller
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponseDto'
  /api/mock/channel:
    post:
      tags:
      - MockController
      summary: mock데이터 생성
      description: |
        원하는 만큼의 mock 채널을 생성, 각 채널에 mock user를 등록, 각 mock user가 mock content를 등록합니다.

        isPrivate으로 비밀 채널 여부를 설정할 수 있습니다. 기본값은 false입니다.

        채널 수, 각 채널 내 mock user 수, 각 mock user가 채널에 등록한 mock content 수를 입력받습니다.

        채널 수는 1 이상, 각 채널 내 mock user 수는 1 이상, 각 mock user는 0개 이상의 mock content를 등록해야 합니다.

        기본값은 각각 3, 3, 3 입니다.

        이곳에서 생성된 모든 비밀번호는 0000 입니다. (인코딩은 한 번만 이루어짐)
      operationId: createMockChannel
      parameters:
      - name: isPrivate
        in: query
        required: false
        schema:
          type: boolean
          default: false
      - name: howManyChannel
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 3
      - name: howManyUserInChannel
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 3
      - name: howManyContentPerUser
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 3
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateMockChannelResponseDto'
  /api/message/jmeter:
    post:
      tags:
      - message-controller
      operationId: jmeterMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequestDto'
        required: true
      responses:
        "200":
          description: OK
  /api/contact:
    get:
      tags:
      - contact-controller
      operationId: getAllContact
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactResponseDto'
    post:
      tags:
      - contact-controller
      operationId: createContact
      parameters:
      - name: contactEmail
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateContactResponseDto'
    delete:
      tags:
      - contact-controller
      operationId: deleteContact
      parameters:
      - name: contactEmail
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactResponseDto'
  /api/channel:
    get:
      tags:
      - ChannelController
      summary: 사용자가 속한 채널 목록(UserChannel)을 조회합니다.
      description: getAllChannelUserIn(@RequestAttribute User user)
      operationId: getAllChannelUserIn
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllChannelUserInResponseDto'
    post:
      tags:
      - ChannelController
      summary: 사용자가 관리자인 채널 생성
      description: |-
        채널 생성 후 사용자를 관리자 권한으로 채널에 등록합니다.

        생성 성공시 채널 정보와 생성한 사용자의 username을 리턴합니다.
      operationId: createChannel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateChannelResponseDto'
  /api/channel/{channelId}/user/{otherUserId}:
    post:
      tags:
      - ChannelController
      summary: 사용자가 속한 특정 채널에 다른 유저 추가
      description: 추가는 관리자가 아니어도 할 수 있습니다.
      operationId: addUserToChannel
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: otherUserId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    delete:
      tags:
      - ChannelController
      summary: 사용자가 속한 특정 채널에서 다른 유저 추방
      description: 추방은 관리자만 할 수 있습니다.
      operationId: kickUserFromChannel
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: otherUserId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/channel/{channelId}/signup:
    post:
      tags:
      - ChannelController
      summary: 채널 id를 사용하여 특정 채널에 가입
      description: |
        사용자가 해당 채널에 가입합니다. 가입 성공 시 사용자는 해당 채널에 속하게 됩니다.

        관리자 권한으로는 가입할 수 없습니다. 단, 자신이 생성한 채널에는 이미 관리자로 가입되어 있습니다.

        아직 채널에 관리자를 추가하는 기능은 없고 채널 생성한 사람만 관리자입니다.

        비밀 채널인 경우 비밀번호를 검사하고 그렇지 않은 경우 비밀번호와 상관 없이 가입됩니다.
      operationId: signUpChannel
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: channelPassword
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SignUpChannelResponseDto'
  /api/wallet/user/transaction/all:
    get:
      tags:
      - personal-wallet-controller
      operationId: getAllTransactionByPersonalWallet
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponseDto'
  /api/wallet/user/reservation:
    get:
      tags:
      - personal-wallet-controller
      operationId: getAllReservationByPersonalWallet
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationResponseDto'
  /api/wallet/user/group/all:
    get:
      tags:
      - personal-wallet-controller
      operationId: getAllGroupWalletByUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupWalletResponseDto'
  /api/wallet/group/{groupWalletId}/transaction/all:
    get:
      tags:
      - group-wallet-controller
      operationId: getAllTransactionByGroupWallet
      parameters:
      - name: groupWalletId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponseDto'
  /api/wallet/group/{groupWalletId}/reservation:
    get:
      tags:
      - group-wallet-controller
      operationId: getAllReservationByGroupWallet
      parameters:
      - name: groupWalletId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationResponseDto'
  /api/wallet/group/{groupWalletId}/participant/all:
    get:
      tags:
      - group-wallet-controller
      operationId: getAllParticipantByGroupWallet
      parameters:
      - name: groupWalletId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletUserResponseDto'
  /api/wallet/group/all/channel/{channelId}:
    get:
      tags:
      - group-wallet-controller
      operationId: getAllGroupWalletByChannelId
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupWalletResponseDto'
  /api/user/logout:
    get:
      tags:
      - user-controller
      operationId: logoutUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/test/{roomId}:
    get:
      tags:
      - channel-page-controller
      summary: 채팅 채널방 기본 구성
      description: |
        채팅방 입장시 채팅방의 이름, 접속한 유저 이름, 최초입장 여부 확인 정보를 반환합니다.

        들어가는 시점에서 채팅방 이름 확인가능 + 로그인한 상태이기 때문에
        채팅방이름과 유저이름은 원래 프론트에서 처리 가능하다고 생각합니다.
      operationId: getRoomAndUserInfo
      parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestMessageRoomUserDto'
  /api/test/{roomId}/content:
    get:
      tags:
      - channel-page-controller
      summary: 채팅 내역 가져오기
      description: |
        ChannelController의 @GetMapping("/{channelId}/content")와 같은 역할 입니다.
        이후 file이 추가를 생각한다면 UserChannel로 구현 해야합니다.
        UserChannel에서 message를 가져오는 법을 몰라서 message로 구현했습니다.
      operationId: getAllMessage
      parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageResponseDto'
  /api/test/room:
    get:
      tags:
      - channel-page-controller
      summary: 채팅 채널 리스트 페이지입니다.
      operationId: rooms
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/test/room/enter/{roomId}:
    get:
      tags:
      - channel-page-controller
      summary: 채팅 채널방 페이지입니다.
      operationId: roomDetail
      parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/test/login:
    get:
      tags:
      - channel-page-controller
      summary: 로그인 페이지입니다.
      operationId: loginPage
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/channel/search:
    get:
      tags:
      - ChannelController
      summary: 키워드로 채널 검색
      description: |
        채널 이름에 대소문자 구분 없이 키워드가 포함되어 있는 채널들을 검색합니다. (채널 이름은 중복될 수 있습니다.)
      operationId: searchChannel
      parameters:
      - name: keyword
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetChannelResponseDto'
  /api/channel-content/{channelId}:
    get:
      tags:
      - ChannelContentController
      summary: GET ALL ChannelContent
      description: |
        ChannelContent를 가져오려면 사용자가 해당 채널에 이미 속해있어야 합니다.
      operationId: getChannelContents
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetChannelContentResponseDto'
components:
  schemas:
    UserRequestDto:
      required:
      - email
      - password
      - username
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
    UserResponseDto:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
    UpdateChannelRequestDto:
      type: object
      properties:
        channelName:
          type: string
        channelDescription:
          type: string
      description: 채널 수정 request Dto
    UpdateChannelResponseDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        channelName:
          type: string
        channelDescription:
          type: string
      description: 채널 수정 response Dto
    PersonalWalletCreateDto:
      type: object
      properties:
        password:
          type: string
    PersonalWalletResponseDto:
      type: object
      properties:
        walletId:
          type: integer
          format: int64
        money:
          type: integer
          format: int64
        username:
          type: string
    PersonalWalletCreateMoneyDto:
      type: object
      properties:
        amount:
          type: integer
          format: int64
    TransactionCreateDto:
      type: object
      properties:
        walletId:
          type: integer
          format: int64
        targetWalletId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        password:
          type: string
        reservationTime:
          type: string
          format: date-time
    TransactionResponseDto:
      type: object
      properties:
        transferType:
          type: string
          enum:
          - SEND
          - RECEIVE
        amount:
          type: integer
          format: int64
        balanceBefore:
          type: integer
          format: int64
        balanceAfter:
          type: integer
          format: int64
        wallet:
          $ref: '#/components/schemas/WalletDto'
        targetWallet:
          $ref: '#/components/schemas/WalletDto'
    WalletDto:
      type: object
      properties:
        owner:
          type: string
    ReservationCreateDto:
      type: object
      properties:
        type:
          type: string
          enum:
          - MONTHLY
          - DAILY
        walletId:
          type: integer
          format: int64
        targetWalletId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        password:
          type: string
        reservationTime:
          type: string
          format: date-time
    ReservationResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        walletId:
          type: integer
          format: int64
        targetWalletId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        reservationTime:
          type: string
          format: date-time
        reservationType:
          type: string
          enum:
          - MONTHLY
          - DAILY
        reservationState:
          type: string
          enum:
          - RESERVATION
          - SUCCESS
          - FAILED
        username:
          type: string
    GroupWalletCreateDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        walletName:
          type: string
        description:
          type: string
        password:
          type: string
    GroupWalletResponseDto:
      type: object
      properties:
        groupWalletId:
          type: integer
          format: int64
        money:
          type: integer
          format: int64
        walletName:
          type: string
        description:
          type: string
        channel:
          type: integer
          format: int64
    LoginUserRequestDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    CreateMockChannelResponseDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        channelName:
          type: string
        channelCreateUsername:
          type: string
        userCount:
          type: integer
          format: int64
        isPrivate:
          type: boolean
        channelDescription:
          type: string
        createdAt:
          type: string
          format: date-time
    MessageRequestDto:
      type: object
      properties:
        type:
          type: string
          enum:
          - ENTER
          - TALK
          - CALLOUT
        channelId:
          type: integer
          format: int64
        senderId:
          type: integer
          format: int64
        senderName:
          type: string
        message:
          type: string
        callOutId:
          type: integer
          format: int64
    CreateContactResponseDto:
      type: object
      properties:
        username:
          type: string
        contactname:
          type: string
    CreateChannelRequestDto:
      type: object
      properties:
        channelName:
          type: string
        channelPassword:
          type: string
        channelDescription:
          type: string
        isPrivate:
          type: boolean
      description: 새 채널 생성 request Dto
    CreateChannelResponseDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        channelCreateUsername:
          type: string
        channelName:
          type: string
        channelDescription:
          type: string
        isPrivate:
          type: boolean
      description: 새 채널 생성 response Dto
    SignUpChannelResponseDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        channelName:
          type: string
        userName:
          type: string
        userEmail:
          type: string
    WalletUserResponseDto:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        userAuthorityEnum:
          type: string
          enum:
          - USER
          - ADMIN
    TestMessageRoomUserDto:
      type: object
      properties:
        roomId:
          type: string
        name:
          type: string
        sender:
          type: string
        firstEntry:
          type: boolean
    MessageResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        userEmail:
          type: string
        userName:
          type: string
        channelId:
          type: integer
          format: int64
        callOutContentId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        notReadCount:
          type: integer
          format: int64
        text:
          type: string
        type:
          type: string
          enum:
          - ENTER
          - TALK
          - CALLOUT
    ContactResponseDto:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
    GetAllChannelUserInResponseDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        channelName:
          type: string
        readTimestamp:
          type: string
          format: date-time
        admin:
          type: boolean
      description: 유저가 가입한 채널 조회 response Dto
    GetChannelResponseDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        channelName:
          type: string
        channelCreateUserName:
          type: string
        userCount:
          type: integer
          format: int64
        isPrivate:
          type: boolean
        channelDescription:
          type: string
        createdAt:
          type: string
          format: date-time
      description: 채널 한 개의 정보 조회 response Dto
    GetChannelContentResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        userEmail:
          type: string
        userName:
          type: string
        channelId:
          type: integer
          format: int64
        callOutContentId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        notReadCount:
          type: integer
          format: int64
      description: ChannelContent 조회 response Dto
  securitySchemes:
    JWT:
      type: http
      description: Bearer와 공백(또는%20)을 제외한 JWT값을 넣어주세요
      scheme: bearer
      bearerFormat: JWT
